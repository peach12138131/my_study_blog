[{"categories":["Agent"],"content":"OpenManus 工具添加指南 本指南将详细介绍如何为 OpenManus 智能体添加新工具。我们将以添加一个简单的计算器工具为例，展示整个流程。 ","date":"2025-03-13","objectID":"/agent_research_addtool/:0:0","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"工具添加流程概述 添加一个新工具到 OpenManus 智能体需要完成以下三个主要步骤： 创建工具类文件：在 ./app/tool/ 目录下创建工具的实现文件 注册工具到智能体：在 ./app/agent/manus.py 中导入并添加工具 更新提示词：在 ./app/prompt/manus.py 中更新提示词，添加工具的描述 下面我们将详细介绍每个步骤。 ","date":"2025-03-13","objectID":"/agent_research_addtool/:1:0","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"步骤 1：创建工具类文件 首先，我们需要在 ./app/tool/ 目录下创建一个新的 Python 文件来实现我们的工具。以计算器工具为例，我们创建 calculator.py。 ","date":"2025-03-13","objectID":"/agent_research_addtool/:2:0","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"calculator.py 的结构 from typing import Union, Dict, Any from app.tool.base import BaseTool class Calculator(BaseTool): name: str = \"calculator\" description: str = \"\"\"Perform basic mathematical operations including addition, subtraction, multiplication, and division. Use this tool when you need to perform numerical calculations. The tool accepts two numeric values and an operation, and returns the calculation result.\"\"\" parameters: dict = { \"type\": \"object\", \"properties\": { \"first_number\": { \"type\": \"number\", \"description\": \"(required) 第一个数值操作数。\", }, \"second_number\": { \"type\": \"number\", \"description\": \"(required) 第二个数值操作数。\", }, \"operation\": { \"type\": \"string\", \"description\": \"(required) 要执行的数学运算。\", \"enum\": [\"add\", \"subtract\", \"multiply\", \"divide\"], }, }, \"required\": [\"first_number\", \"second_number\", \"operation\"], } async def execute( self, first_number: Union[int, float], second_number: Union[int, float], operation: str ) -\u003e Dict[str, Any]: \"\"\" 执行基本的数学计算操作。 Args: first_number (Union[int, float]): 第一个数值操作数。 second_number (Union[int, float]): 第二个数值操作数。 operation (str): 要执行的数学运算，可以是 \"add\"、\"subtract\"、\"multiply\" 或 \"divide\"。 Returns: Dict[str, Any]: 包含计算结果和运算说明的字典。 \"\"\" try: if operation == \"add\": result = first_number + second_number expression = f\"{first_number} + {second_number}\" elif operation == \"subtract\": result = first_number - second_number expression = f\"{first_number} - {second_number}\" elif operation == \"multiply\": result = first_number * second_number expression = f\"{first_number} × {second_number}\" elif operation == \"divide\": if second_number == 0: raise ValueError(\"除数不能为零\") result = first_number / second_number expression = f\"{first_number} ÷ {second_number}\" else: raise ValueError(f\"不支持的操作: {operation}\") return { \"result\": result, \"expression\": expression, \"operation\": operation } except Exception as e: return { \"error\": str(e), \"first_number\": first_number, \"second_number\": second_number, \"operation\": operation }\r","date":"2025-03-13","objectID":"/agent_research_addtool/:2:1","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"工具类的关键组成部分 继承 BaseTool：所有工具都必须继承自 BaseTool 基类 定义工具属性： name：工具的唯一标识符 description：工具的详细描述，会显示在 AI 的工具选择界面 parameters：定义工具接受的参数，使用 JSONSchema 格式 实现 execute 方法：工具的核心逻辑，接收参数并返回结果 ","date":"2025-03-13","objectID":"/agent_research_addtool/:2:2","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"步骤 2：注册工具到智能体 创建好工具类后，我们需要将其导入并添加到 Manus 智能体的可用工具列表中。这需要修改 ./app/agent/manus.py 文件。 ","date":"2025-03-13","objectID":"/agent_research_addtool/:3:0","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"修改 manus.py from pydantic import Field from app.agent.toolcall import ToolCallAgent from app.prompt.manus import NEXT_STEP_PROMPT, SYSTEM_PROMPT from app.tool import Terminate, ToolCollection from app.tool.browser_use_tool import BrowserUseTool from app.tool.file_saver import FileSaver from app.tool.google_search import GoogleSearch from app.tool.python_execute import PythonExecute # 导入新工具 from app.tool.calculator import Calculator class Manus(ToolCallAgent): \"\"\" A versatile general-purpose agent that uses planning to solve various tasks. This agent extends PlanningAgent with a comprehensive set of tools and capabilities, including Python execution, web browsing, file operations, and information retrieval to handle a wide range of user requests. \"\"\" name: str = \"Manus\" description: str = ( \"A versatile agent that can solve various tasks using multiple tools\" ) system_prompt: str = SYSTEM_PROMPT next_step_prompt: str = NEXT_STEP_PROMPT # 在工具集合中添加新工具 available_tools: ToolCollection = Field( default_factory=lambda: ToolCollection( PythonExecute(), GoogleSearch(), BrowserUseTool(), FileSaver(), Terminate(), Calculator() ) )\r","date":"2025-03-13","objectID":"/agent_research_addtool/:3:1","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"关键修改点 导入工具类：添加 from app.tool.calculator import Calculator 导入语句 添加到工具集合：在 ToolCollection 中添加 Calculator() 实例 ","date":"2025-03-13","objectID":"/agent_research_addtool/:3:2","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"步骤 3：更新提示词 最后，我们需要更新 ./app/prompt/manus.py 中的提示词，添加关于新工具的描述，以便 AI 知道何时使用这个工具。 ","date":"2025-03-13","objectID":"/agent_research_addtool/:4:0","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"修改 manus.py (prompt) SYSTEM_PROMPT = \"You are OpenManus, an all-capable AI assistant, aimed at solving any task presented by the user. You have various tools at your disposal that you can call upon to efficiently complete complex requests. Whether it's programming, information retrieval, file processing, or web browsing, you can handle it all.\" NEXT_STEP_PROMPT = \"\"\"You can interact with the computer using PythonExecute, save important content and information files through FileSaver, open browsers with BrowserUseTool, and retrieve information using GoogleSearch. You can also perform mathematical calculations using Calculator. PythonExecute: Execute Python code to interact with the computer system, data processing, automation tasks, etc. FileSaver: Save files locally, such as txt, py, html, etc. BrowserUseTool: Open, browse, and use web browsers. If you open a local HTML file, you must provide the absolute path to the file. GoogleSearch: Perform web information retrieval. Calculator: Perform basic mathematical operations including addition, subtraction, multiplication, and division. Based on user needs, proactively select the most appropriate tool or combination of tools. For complex tasks, you can break down the problem and use different tools step by step to solve it. After using each tool, clearly explain the execution results and suggest the next steps. \"\"\"\r","date":"2025-03-13","objectID":"/agent_research_addtool/:4:1","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"关键修改点 添加工具描述：在 NEXT_STEP_PROMPT 中添加 Calculator 工具的简要描述 更新工具列表：在开头的概述中提及新添加的 Calculator 工具 ","date":"2025-03-13","objectID":"/agent_research_addtool/:4:2","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"总结 通过以上三个步骤，我们成功地为 OpenManus 智能体添加了一个新的计算器工具。这个过程可以概括为： 创建工具类文件，实现工具逻辑 将工具注册到智能体的可用工具列表中 更新提示词，添加工具的描述信息 这个流程适用于添加任何新工具到 OpenManus 智能体中。 ","date":"2025-03-13","objectID":"/agent_research_addtool/:5:0","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"项目概述 OpenManus 是一个基于大型语言模型(LLM)的智能代理框架，旨在创建能够使用各种工具执行复杂任务的AI助手。该项目采用模块化设计，包含多种代理类型、工具集合和执行流程，使开发者能够构建功能强大的AI应用。 开源地址：https://github.com/mannaandpoem/OpenManus/tree/main 项目结构 项目主要由以下几个核心模块组成： Agent模块 - 定义各种类型的智能代理 Tool模块 - 提供各种工具的实现 Flow模块 - 管理代理的执行流程 Prompt模块 - 存储各种代理的提示词模板 基础设施 - 包括配置、日志、异常处理等 ","date":"2025-03-13","objectID":"/agent_research/:0:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"学习路径 ","date":"2025-03-13","objectID":"/agent_research/:1:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"1. 从基础设施开始 首先了解项目的基础设施，这些组件为整个项目提供支持： config.py - 配置管理，包括LLM设置 logger.py - 日志系统 exceptions.py - 异常处理 schema.py - 核心数据模型和结构 这些文件定义了项目的基本数据结构和配置方式，是理解整个项目的基础。 ","date":"2025-03-13","objectID":"/agent_research/:1:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"2. 理解核心抽象 接下来，了解项目的核心抽象类： llm.py - LLM接口，处理与语言模型的交互 agent/base.py - 代理的抽象基类 tool/base.py - 工具的抽象基类 flow/base.py - 流程的抽象基类 这些抽象类定义了项目的核心架构和扩展点。 ","date":"2025-03-13","objectID":"/agent_research/:1:2","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"3. 探索具体实现 然后，研究各种具体实现： 代理实现 agent/react.py - ReAct代理（推理-行动-观察循环） agent/toolcall.py - 工具调用代理 agent/planning.py - 规划代理 agent/swe.py - 软件工程代理 agent/manus.py - Manus代理 工具实现 tool/python_execute.py - Python代码执行工具 tool/file_saver.py - 文件保存工具 tool/browser_use_tool.py - 浏览器使用工具 tool/google_search.py - Google搜索工具 tool/terminate.py - 终止工具 tool/planning.py - 规划工具 流程实现 flow/flow_factory.py - 流程工厂 flow/planning.py - 规划流程 ","date":"2025-03-13","objectID":"/agent_research/:1:3","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"4. 理解提示词模板 最后，了解各种代理使用的提示词模板： prompt/manus.py prompt/planning.py prompt/swe.py prompt/toolcall.py ","date":"2025-03-13","objectID":"/agent_research/:1:4","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"依赖层级 项目的依赖层级可以分为以下几层： ","date":"2025-03-13","objectID":"/agent_research/:2:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"底层（基础设施层） config.py logger.py exceptions.py schema.py ","date":"2025-03-13","objectID":"/agent_research/:2:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"中间层（核心功能层） llm.py tool/base.py agent/base.py flow/base.py ","date":"2025-03-13","objectID":"/agent_research/:2:2","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"上层（具体实现层） 各种具体的代理实现 各种具体的工具实现 各种具体的流程实现 ","date":"2025-03-13","objectID":"/agent_research/:2:3","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"应用层 最终的应用代理（如ManusAgent、SWEAgent等） ","date":"2025-03-13","objectID":"/agent_research/:2:4","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"执行流程 OpenManus的典型执行流程如下： 初始化 - 创建代理实例，设置系统提示词 接收输入 - 接收用户输入并添加到代理的内存中 思考/规划 - 代理分析当前状态并决定下一步行动 工具调用 - 如果需要，代理会调用相应的工具 工具执行 - 执行工具并获取结果 处理结果 - 处理工具执行结果并更新代理状态 生成响应 - 生成对用户的响应 判断完成 - 判断任务是否完成，如果未完成则返回步骤3 ","date":"2025-03-13","objectID":"/agent_research/:3:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"关键概念 ","date":"2025-03-13","objectID":"/agent_research/:4:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Agent（代理） 代理是框架的核心，负责理解用户需求、规划行动、调用工具和生成响应。不同类型的代理有不同的能力和专长。 ","date":"2025-03-13","objectID":"/agent_research/:4:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Tool（工具） 工具是代理可以使用的各种功能模块，如Python代码执行、文件保存、网页浏览等。工具提供了代理与外部世界交互的能力。 ","date":"2025-03-13","objectID":"/agent_research/:4:2","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Flow（流程） 流程管理多个代理之间的协作，定义了任务执行的整体流程和策略。 ","date":"2025-03-13","objectID":"/agent_research/:4:3","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Memory（内存） 内存存储代理的对话历史和状态，使代理能够保持上下文连贯性。 ","date":"2025-03-13","objectID":"/agent_research/:4:4","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"扩展建议 如果您想扩展这个框架，可以考虑： 添加新工具 - 实现BaseTool抽象类，添加新的工具功能 创建新代理 - 继承现有代理类或BaseAgent，实现特定领域的代理 定义新流程 - 继承BaseFlow，创建新的执行流程 优化提示词 - 改进现有提示词模板，提高代理性能 ","date":"2025-03-13","objectID":"/agent_research/:5:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"实践建议 从简单开始 - 先尝试使用现有代理和工具 逐步深入 - 然后尝试修改现有代理的行为 添加新功能 - 最后尝试添加新的工具或代理 ","date":"2025-03-13","objectID":"/agent_research/:6:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"参考资源 项目中的注释和文档字符串 各个模块的示例代码 相关的LLM和代理系统文献 OpenManus 项目分析报告 ","date":"2025-03-13","objectID":"/agent_research/:7:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"1. 项目概述 OpenManus 是一个基于大型语言模型(LLM)的智能助手框架，它提供了一套灵活的架构，用于构建能够执行各种任务的AI助手。该项目的核心功能是通过工具调用(Tool Calling)机制，使AI助手能够与外部系统交互，执行如Python代码、网页浏览、文件操作和信息检索等任务。 ","date":"2025-03-13","objectID":"/agent_research/:8:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"主要特点 模块化架构：项目采用了清晰的模块化设计，包括Agent、Tool、Flow等核心组件 工具调用机制：支持AI助手调用各种工具来执行具体任务 流程控制：通过Flow组件管理复杂任务的执行流程 可扩展性：易于添加新的Agent类型和Tool实现 ","date":"2025-03-13","objectID":"/agent_research/:8:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"2. 代码阅读顺序建议 为了更好地理解项目，建议按照以下顺序阅读代码： ","date":"2025-03-13","objectID":"/agent_research/:9:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"第一阶段：基础结构和核心概念 app/__init__.py - 项目入口点 app/config.py - 配置管理 app/schema.py - 核心数据结构定义 app/llm.py - 语言模型接口 ","date":"2025-03-13","objectID":"/agent_research/:9:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"第二阶段：核心抽象类 app/agent/base.py - Agent基类 app/tool/base.py - Tool基类 app/flow/base.py - Flow基类 ","date":"2025-03-13","objectID":"/agent_research/:9:2","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"第三阶段：具体实现 app/agent/react.py - ReAct模式Agent app/agent/toolcall.py - 工具调用Agent app/agent/manus.py - Manus主Agent实现 app/tool/tool_collection.py - 工具集合 app/tool/python_execute.py 等工具实现 app/flow/planning.py - 规划流程实现 ","date":"2025-03-13","objectID":"/agent_research/:9:3","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"第四阶段：提示模板和辅助功能 app/prompt/ 目录下的提示模板 app/exceptions.py - 异常处理 app/logger.py - 日志功能 ","date":"2025-03-13","objectID":"/agent_research/:9:4","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"3. 代码依赖层级 项目的依赖层级从底层到顶层大致如下： ","date":"2025-03-13","objectID":"/agent_research/:10:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"底层基础组件 配置管理 (config.py) 数据结构 (schema.py) LLM接口 (llm.py) 日志和异常 (logger.py, exceptions.py) ","date":"2025-03-13","objectID":"/agent_research/:10:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"中间抽象层 基础抽象类 (agent/base.py, tool/base.py, flow/base.py) 工具集合 (tool/tool_collection.py) ","date":"2025-03-13","objectID":"/agent_research/:10:2","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"上层实现层 具体Agent实现 (agent/react.py, agent/toolcall.py, agent/manus.py) 具体工具实现 (tool/python_execute.py, tool/browser_use_tool.py 等) 流程实现 (flow/planning.py) ","date":"2025-03-13","objectID":"/agent_research/:10:3","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"最上层应用层 提示模板 (prompt/ 目录) 流程工厂 (flow/flow_factory.py) ","date":"2025-03-13","objectID":"/agent_research/:10:4","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"4. 核心组件详解 ","date":"2025-03-13","objectID":"/agent_research/:11:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Agent 组件 Agent是项目的核心执行单元，负责决策和执行操作。项目实现了多种Agent： BaseAgent：所有Agent的抽象基类，提供状态管理、记忆管理等基础功能 ReActAgent：实现ReAct模式的Agent，包含思考(think)和行动(act)两个核心方法 ToolCallAgent：能够执行工具调用的Agent，是Manus的基础 Manus：主要的Agent实现，集成了多种工具，能够处理各种任务 ","date":"2025-03-13","objectID":"/agent_research/:11:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Tool 组件 Tool是Agent用来执行具体操作的工具： BaseTool：所有工具的抽象基类 ToolCollection：工具集合，管理多个工具 具体工具实现： PythonExecute：执行Python代码 BrowserUseTool：浏览器操作 GoogleSearch：网络搜索 FileSaver：文件保存 Terminate：终止执行 ","date":"2025-03-13","objectID":"/agent_research/:11:2","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Flow 组件 Flow负责管理复杂任务的执行流程： BaseFlow：流程的抽象基类 PlanningFlow：实现基于规划的任务执行流程 FlowFactory：创建不同类型Flow的工厂类 ","date":"2025-03-13","objectID":"/agent_research/:11:3","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"5. 关键流程分析 ","date":"2025-03-13","objectID":"/agent_research/:12:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Agent执行流程 Agent通过run()方法启动执行 在每个执行步骤中，先调用think()方法决定下一步操作 然后调用act()方法执行具体操作 重复以上步骤直到达到最大步数或任务完成 ","date":"2025-03-13","objectID":"/agent_research/:12:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"工具调用流程 ToolCallAgent接收用户输入 调用LLM生成包含工具调用的响应 解析工具调用参数 执行相应的工具 将工具执行结果返回给LLM 生成最终响应 ","date":"2025-03-13","objectID":"/agent_research/:12:2","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"规划执行流程 PlanningFlow接收任务请求 创建初始计划 逐步执行计划中的每个步骤 为每个步骤选择合适的执行Agent 标记步骤完成状态 生成最终执行总结 ","date":"2025-03-13","objectID":"/agent_research/:12:3","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"6. 扩展建议 如果您想扩展项目功能，可以考虑： 添加新的Tool实现 创建特定领域的Agent 实现新的Flow类型 优化提示模板 ","date":"2025-03-13","objectID":"/agent_research/:13:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"}]