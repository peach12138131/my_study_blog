[{"categories":["Agent"],"content":"OpenManus 工具添加指南 本指南将详细介绍如何为 OpenManus 智能体添加新工具。我们将以添加一个简单的计算器工具为例，展示整个流程。 ","date":"2025-03-13","objectID":"/agent_research_addtool/:0:0","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"工具添加流程概述 添加一个新工具到 OpenManus 智能体需要完成以下三个主要步骤： 创建工具类文件：在 ./app/tool/ 目录下创建工具的实现文件 注册工具到智能体：在 ./app/agent/manus.py 中导入并添加工具 更新提示词：在 ./app/prompt/manus.py 中更新提示词，添加工具的描述 下面我们将详细介绍每个步骤。 ","date":"2025-03-13","objectID":"/agent_research_addtool/:1:0","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"步骤 1：创建工具类文件 首先，我们需要在 ./app/tool/ 目录下创建一个新的 Python 文件来实现我们的工具。以计算器工具为例，我们创建 calculator.py。 ","date":"2025-03-13","objectID":"/agent_research_addtool/:2:0","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"calculator.py 的结构 from typing import Union, Dict, Any from app.tool.base import BaseTool class Calculator(BaseTool): name: str = \"calculator\" description: str = \"\"\"Perform basic mathematical operations including addition, subtraction, multiplication, and division. Use this tool when you need to perform numerical calculations. The tool accepts two numeric values and an operation, and returns the calculation result.\"\"\" parameters: dict = { \"type\": \"object\", \"properties\": { \"first_number\": { \"type\": \"number\", \"description\": \"(required) 第一个数值操作数。\", }, \"second_number\": { \"type\": \"number\", \"description\": \"(required) 第二个数值操作数。\", }, \"operation\": { \"type\": \"string\", \"description\": \"(required) 要执行的数学运算。\", \"enum\": [\"add\", \"subtract\", \"multiply\", \"divide\"], }, }, \"required\": [\"first_number\", \"second_number\", \"operation\"], } async def execute( self, first_number: Union[int, float], second_number: Union[int, float], operation: str ) -\u003e Dict[str, Any]: \"\"\" 执行基本的数学计算操作。 Args: first_number (Union[int, float]): 第一个数值操作数。 second_number (Union[int, float]): 第二个数值操作数。 operation (str): 要执行的数学运算，可以是 \"add\"、\"subtract\"、\"multiply\" 或 \"divide\"。 Returns: Dict[str, Any]: 包含计算结果和运算说明的字典。 \"\"\" try: if operation == \"add\": result = first_number + second_number expression = f\"{first_number} + {second_number}\" elif operation == \"subtract\": result = first_number - second_number expression = f\"{first_number} - {second_number}\" elif operation == \"multiply\": result = first_number * second_number expression = f\"{first_number} × {second_number}\" elif operation == \"divide\": if second_number == 0: raise ValueError(\"除数不能为零\") result = first_number / second_number expression = f\"{first_number} ÷ {second_number}\" else: raise ValueError(f\"不支持的操作: {operation}\") return { \"result\": result, \"expression\": expression, \"operation\": operation } except Exception as e: return { \"error\": str(e), \"first_number\": first_number, \"second_number\": second_number, \"operation\": operation }\r","date":"2025-03-13","objectID":"/agent_research_addtool/:2:1","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"工具类的关键组成部分 继承 BaseTool：所有工具都必须继承自 BaseTool 基类 定义工具属性： name：工具的唯一标识符 description：工具的详细描述，会显示在 AI 的工具选择界面 parameters：定义工具接受的参数，使用 JSONSchema 格式 实现 execute 方法：工具的核心逻辑，接收参数并返回结果 ","date":"2025-03-13","objectID":"/agent_research_addtool/:2:2","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"步骤 2：注册工具到智能体 创建好工具类后，我们需要将其导入并添加到 Manus 智能体的可用工具列表中。这需要修改 ./app/agent/manus.py 文件。 ","date":"2025-03-13","objectID":"/agent_research_addtool/:3:0","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"修改 manus.py from pydantic import Field from app.agent.toolcall import ToolCallAgent from app.prompt.manus import NEXT_STEP_PROMPT, SYSTEM_PROMPT from app.tool import Terminate, ToolCollection from app.tool.browser_use_tool import BrowserUseTool from app.tool.file_saver import FileSaver from app.tool.google_search import GoogleSearch from app.tool.python_execute import PythonExecute # 导入新工具 from app.tool.calculator import Calculator class Manus(ToolCallAgent): \"\"\" A versatile general-purpose agent that uses planning to solve various tasks. This agent extends PlanningAgent with a comprehensive set of tools and capabilities, including Python execution, web browsing, file operations, and information retrieval to handle a wide range of user requests. \"\"\" name: str = \"Manus\" description: str = ( \"A versatile agent that can solve various tasks using multiple tools\" ) system_prompt: str = SYSTEM_PROMPT next_step_prompt: str = NEXT_STEP_PROMPT # 在工具集合中添加新工具 available_tools: ToolCollection = Field( default_factory=lambda: ToolCollection( PythonExecute(), GoogleSearch(), BrowserUseTool(), FileSaver(), Terminate(), Calculator() ) )\r","date":"2025-03-13","objectID":"/agent_research_addtool/:3:1","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"关键修改点 导入工具类：添加 from app.tool.calculator import Calculator 导入语句 添加到工具集合：在 ToolCollection 中添加 Calculator() 实例 ","date":"2025-03-13","objectID":"/agent_research_addtool/:3:2","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"步骤 3：更新提示词 最后，我们需要更新 ./app/prompt/manus.py 中的提示词，添加关于新工具的描述，以便 AI 知道何时使用这个工具。 ","date":"2025-03-13","objectID":"/agent_research_addtool/:4:0","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"修改 manus.py (prompt) SYSTEM_PROMPT = \"You are OpenManus, an all-capable AI assistant, aimed at solving any task presented by the user. You have various tools at your disposal that you can call upon to efficiently complete complex requests. Whether it's programming, information retrieval, file processing, or web browsing, you can handle it all.\" NEXT_STEP_PROMPT = \"\"\"You can interact with the computer using PythonExecute, save important content and information files through FileSaver, open browsers with BrowserUseTool, and retrieve information using GoogleSearch. You can also perform mathematical calculations using Calculator. PythonExecute: Execute Python code to interact with the computer system, data processing, automation tasks, etc. FileSaver: Save files locally, such as txt, py, html, etc. BrowserUseTool: Open, browse, and use web browsers. If you open a local HTML file, you must provide the absolute path to the file. GoogleSearch: Perform web information retrieval. Calculator: Perform basic mathematical operations including addition, subtraction, multiplication, and division. Based on user needs, proactively select the most appropriate tool or combination of tools. For complex tasks, you can break down the problem and use different tools step by step to solve it. After using each tool, clearly explain the execution results and suggest the next steps. \"\"\"\r","date":"2025-03-13","objectID":"/agent_research_addtool/:4:1","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"关键修改点 添加工具描述：在 NEXT_STEP_PROMPT 中添加 Calculator 工具的简要描述 更新工具列表：在开头的概述中提及新添加的 Calculator 工具 ","date":"2025-03-13","objectID":"/agent_research_addtool/:4:2","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"总结 通过以上三个步骤，我们成功地为 OpenManus 智能体添加了一个新的计算器工具。这个过程可以概括为： 创建工具类文件，实现工具逻辑 将工具注册到智能体的可用工具列表中 更新提示词，添加工具的描述信息 这个流程适用于添加任何新工具到 OpenManus 智能体中。 ","date":"2025-03-13","objectID":"/agent_research_addtool/:5:0","tags":["Agent","OpenManus"],"title":"OpenManus 如何添加工具","uri":"/agent_research_addtool/"},{"categories":["Agent"],"content":"项目概述 OpenManus 是一个基于大型语言模型(LLM)的智能代理框架，旨在创建能够使用各种工具执行复杂任务的AI助手。该项目采用模块化设计，包含多种代理类型、工具集合和执行流程，使开发者能够构建功能强大的AI应用。 开源地址：https://github.com/mannaandpoem/OpenManus/tree/main 项目结构 项目主要由以下几个核心模块组成： Agent模块 - 定义各种类型的智能代理 Tool模块 - 提供各种工具的实现 Flow模块 - 管理代理的执行流程 Prompt模块 - 存储各种代理的提示词模板 基础设施 - 包括配置、日志、异常处理等 ","date":"2025-03-13","objectID":"/agent_research/:0:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"学习路径 ","date":"2025-03-13","objectID":"/agent_research/:1:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"1. 从基础设施开始 首先了解项目的基础设施，这些组件为整个项目提供支持： config.py - 配置管理，包括LLM设置 logger.py - 日志系统 exceptions.py - 异常处理 schema.py - 核心数据模型和结构 这些文件定义了项目的基本数据结构和配置方式，是理解整个项目的基础。 ","date":"2025-03-13","objectID":"/agent_research/:1:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"2. 理解核心抽象 接下来，了解项目的核心抽象类： llm.py - LLM接口，处理与语言模型的交互 agent/base.py - 代理的抽象基类 tool/base.py - 工具的抽象基类 flow/base.py - 流程的抽象基类 这些抽象类定义了项目的核心架构和扩展点。 ","date":"2025-03-13","objectID":"/agent_research/:1:2","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"3. 探索具体实现 然后，研究各种具体实现： 代理实现 agent/react.py - ReAct代理（推理-行动-观察循环） agent/toolcall.py - 工具调用代理 agent/planning.py - 规划代理 agent/swe.py - 软件工程代理 agent/manus.py - Manus代理 工具实现 tool/python_execute.py - Python代码执行工具 tool/file_saver.py - 文件保存工具 tool/browser_use_tool.py - 浏览器使用工具 tool/google_search.py - Google搜索工具 tool/terminate.py - 终止工具 tool/planning.py - 规划工具 流程实现 flow/flow_factory.py - 流程工厂 flow/planning.py - 规划流程 ","date":"2025-03-13","objectID":"/agent_research/:1:3","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"4. 理解提示词模板 最后，了解各种代理使用的提示词模板： prompt/manus.py prompt/planning.py prompt/swe.py prompt/toolcall.py ","date":"2025-03-13","objectID":"/agent_research/:1:4","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"依赖层级 项目的依赖层级可以分为以下几层： ","date":"2025-03-13","objectID":"/agent_research/:2:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"底层（基础设施层） config.py logger.py exceptions.py schema.py ","date":"2025-03-13","objectID":"/agent_research/:2:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"中间层（核心功能层） llm.py tool/base.py agent/base.py flow/base.py ","date":"2025-03-13","objectID":"/agent_research/:2:2","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"上层（具体实现层） 各种具体的代理实现 各种具体的工具实现 各种具体的流程实现 ","date":"2025-03-13","objectID":"/agent_research/:2:3","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"应用层 最终的应用代理（如ManusAgent、SWEAgent等） ","date":"2025-03-13","objectID":"/agent_research/:2:4","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"执行流程 OpenManus的典型执行流程如下： 初始化 - 创建代理实例，设置系统提示词 接收输入 - 接收用户输入并添加到代理的内存中 思考/规划 - 代理分析当前状态并决定下一步行动 工具调用 - 如果需要，代理会调用相应的工具 工具执行 - 执行工具并获取结果 处理结果 - 处理工具执行结果并更新代理状态 生成响应 - 生成对用户的响应 判断完成 - 判断任务是否完成，如果未完成则返回步骤3 ","date":"2025-03-13","objectID":"/agent_research/:3:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"关键概念 ","date":"2025-03-13","objectID":"/agent_research/:4:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Agent（代理） 代理是框架的核心，负责理解用户需求、规划行动、调用工具和生成响应。不同类型的代理有不同的能力和专长。 ","date":"2025-03-13","objectID":"/agent_research/:4:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Tool（工具） 工具是代理可以使用的各种功能模块，如Python代码执行、文件保存、网页浏览等。工具提供了代理与外部世界交互的能力。 ","date":"2025-03-13","objectID":"/agent_research/:4:2","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Flow（流程） 流程管理多个代理之间的协作，定义了任务执行的整体流程和策略。 ","date":"2025-03-13","objectID":"/agent_research/:4:3","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Memory（内存） 内存存储代理的对话历史和状态，使代理能够保持上下文连贯性。 ","date":"2025-03-13","objectID":"/agent_research/:4:4","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"扩展建议 如果您想扩展这个框架，可以考虑： 添加新工具 - 实现BaseTool抽象类，添加新的工具功能 创建新代理 - 继承现有代理类或BaseAgent，实现特定领域的代理 定义新流程 - 继承BaseFlow，创建新的执行流程 优化提示词 - 改进现有提示词模板，提高代理性能 ","date":"2025-03-13","objectID":"/agent_research/:5:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"实践建议 从简单开始 - 先尝试使用现有代理和工具 逐步深入 - 然后尝试修改现有代理的行为 添加新功能 - 最后尝试添加新的工具或代理 ","date":"2025-03-13","objectID":"/agent_research/:6:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"参考资源 项目中的注释和文档字符串 各个模块的示例代码 相关的LLM和代理系统文献 OpenManus 项目分析报告 ","date":"2025-03-13","objectID":"/agent_research/:7:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"1. 项目概述 OpenManus 是一个基于大型语言模型(LLM)的智能助手框架，它提供了一套灵活的架构，用于构建能够执行各种任务的AI助手。该项目的核心功能是通过工具调用(Tool Calling)机制，使AI助手能够与外部系统交互，执行如Python代码、网页浏览、文件操作和信息检索等任务。 ","date":"2025-03-13","objectID":"/agent_research/:8:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"主要特点 模块化架构：项目采用了清晰的模块化设计，包括Agent、Tool、Flow等核心组件 工具调用机制：支持AI助手调用各种工具来执行具体任务 流程控制：通过Flow组件管理复杂任务的执行流程 可扩展性：易于添加新的Agent类型和Tool实现 ","date":"2025-03-13","objectID":"/agent_research/:8:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"2. 代码阅读顺序建议 为了更好地理解项目，建议按照以下顺序阅读代码： ","date":"2025-03-13","objectID":"/agent_research/:9:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"第一阶段：基础结构和核心概念 app/__init__.py - 项目入口点 app/config.py - 配置管理 app/schema.py - 核心数据结构定义 app/llm.py - 语言模型接口 ","date":"2025-03-13","objectID":"/agent_research/:9:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"第二阶段：核心抽象类 app/agent/base.py - Agent基类 app/tool/base.py - Tool基类 app/flow/base.py - Flow基类 ","date":"2025-03-13","objectID":"/agent_research/:9:2","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"第三阶段：具体实现 app/agent/react.py - ReAct模式Agent app/agent/toolcall.py - 工具调用Agent app/agent/manus.py - Manus主Agent实现 app/tool/tool_collection.py - 工具集合 app/tool/python_execute.py 等工具实现 app/flow/planning.py - 规划流程实现 ","date":"2025-03-13","objectID":"/agent_research/:9:3","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"第四阶段：提示模板和辅助功能 app/prompt/ 目录下的提示模板 app/exceptions.py - 异常处理 app/logger.py - 日志功能 ","date":"2025-03-13","objectID":"/agent_research/:9:4","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"3. 代码依赖层级 项目的依赖层级从底层到顶层大致如下： ","date":"2025-03-13","objectID":"/agent_research/:10:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"底层基础组件 配置管理 (config.py) 数据结构 (schema.py) LLM接口 (llm.py) 日志和异常 (logger.py, exceptions.py) ","date":"2025-03-13","objectID":"/agent_research/:10:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"中间抽象层 基础抽象类 (agent/base.py, tool/base.py, flow/base.py) 工具集合 (tool/tool_collection.py) ","date":"2025-03-13","objectID":"/agent_research/:10:2","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"上层实现层 具体Agent实现 (agent/react.py, agent/toolcall.py, agent/manus.py) 具体工具实现 (tool/python_execute.py, tool/browser_use_tool.py 等) 流程实现 (flow/planning.py) ","date":"2025-03-13","objectID":"/agent_research/:10:3","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"最上层应用层 提示模板 (prompt/ 目录) 流程工厂 (flow/flow_factory.py) ","date":"2025-03-13","objectID":"/agent_research/:10:4","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"4. 核心组件详解 ","date":"2025-03-13","objectID":"/agent_research/:11:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Agent 组件 Agent是项目的核心执行单元，负责决策和执行操作。项目实现了多种Agent： BaseAgent：所有Agent的抽象基类，提供状态管理、记忆管理等基础功能 ReActAgent：实现ReAct模式的Agent，包含思考(think)和行动(act)两个核心方法 ToolCallAgent：能够执行工具调用的Agent，是Manus的基础 Manus：主要的Agent实现，集成了多种工具，能够处理各种任务 ","date":"2025-03-13","objectID":"/agent_research/:11:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Tool 组件 Tool是Agent用来执行具体操作的工具： BaseTool：所有工具的抽象基类 ToolCollection：工具集合，管理多个工具 具体工具实现： PythonExecute：执行Python代码 BrowserUseTool：浏览器操作 GoogleSearch：网络搜索 FileSaver：文件保存 Terminate：终止执行 ","date":"2025-03-13","objectID":"/agent_research/:11:2","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Flow 组件 Flow负责管理复杂任务的执行流程： BaseFlow：流程的抽象基类 PlanningFlow：实现基于规划的任务执行流程 FlowFactory：创建不同类型Flow的工厂类 ","date":"2025-03-13","objectID":"/agent_research/:11:3","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"5. 关键流程分析 ","date":"2025-03-13","objectID":"/agent_research/:12:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"Agent执行流程 Agent通过run()方法启动执行 在每个执行步骤中，先调用think()方法决定下一步操作 然后调用act()方法执行具体操作 重复以上步骤直到达到最大步数或任务完成 ","date":"2025-03-13","objectID":"/agent_research/:12:1","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"工具调用流程 ToolCallAgent接收用户输入 调用LLM生成包含工具调用的响应 解析工具调用参数 执行相应的工具 将工具执行结果返回给LLM 生成最终响应 ","date":"2025-03-13","objectID":"/agent_research/:12:2","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"规划执行流程 PlanningFlow接收任务请求 创建初始计划 逐步执行计划中的每个步骤 为每个步骤选择合适的执行Agent 标记步骤完成状态 生成最终执行总结 ","date":"2025-03-13","objectID":"/agent_research/:12:3","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["Agent"],"content":"6. 扩展建议 如果您想扩展项目功能，可以考虑： 添加新的Tool实现 创建特定领域的Agent 实现新的Flow类型 优化提示模板 ","date":"2025-03-13","objectID":"/agent_research/:13:0","tags":["Agent","OpenManus"],"title":"OpenManus 项目简介","uri":"/agent_research/"},{"categories":["推荐系统"],"content":"推荐系统前沿研究总结（2023年至今） ","date":"2025-03-13","objectID":"/recomand_system/:0:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"概述 本文档总结了2023年至今推荐系统领域的前沿研究成果，包括学术界和工业界的最新进展。推荐系统作为当今互联网服务的核心组件，在电商、社交媒体、视频平台等领域发挥着至关重要的作用。随着大语言模型(LLM)的兴起，推荐系统也正在经历新一轮的技术革新。 ","date":"2025-03-13","objectID":"/recomand_system/:1:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"主要研究方向 ","date":"2025-03-13","objectID":"/recomand_system/:2:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"1. 大语言模型在推荐系统中的应用 大语言模型(LLM)正在深刻改变推荐系统的研究和应用方向。主要研究包括： LLM作为推荐器：直接利用LLM的强大语义理解和生成能力进行推荐 LLM增强的推荐系统：将LLM与传统推荐模型结合，增强推荐效果 知识增强：利用LLM从开放世界获取知识，弥补传统推荐系统的知识缺口 代表性工作： “Towards Open-World Recommendation with Knowledge Augmentation from Large Language Models” (上海交通大学\u0026华为) “ReLand: Integrating Large Language Models’ Insights into Industrial Recommenders via a Controllable Reasoning Pool” (蚂蚁集团) “CALRec: Contrastive Alignment of Generative LLMs For Sequential Recommendation” (剑桥大学\u0026谷歌) ","date":"2025-03-13","objectID":"/recomand_system/:2:1","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"2. 多模态推荐系统 多模态推荐系统通过整合文本、图像、音频等多种模态的信息，提供更全面的用户兴趣表示和物品表示。 代表性工作： “RESA Multi-modal Modeling Framework for Cold-start Short-video Recommendation” (快手科技) “RESA multimodal single-branch embedding network for recommendation in cold-start and missing modality scenarios” (Johannes Kepler University Linz) “RESA Unified Graph Transformer for Overcoming Isolations in Multi-modal Recommendation” (格拉斯哥大学) ","date":"2025-03-13","objectID":"/recomand_system/:2:2","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"3. 序列推荐的新进展 序列推荐继续是研究热点，主要关注如何更好地捕捉用户长期兴趣和短期兴趣。 代表性工作： “TWIN: TWo-stage Interest Network for Lifelong User Behavior Modeling in CTR Prediction at Kuaishou” (快手) “TWIN V2: Scaling Ultra-Long User Behavior Sequence Modeling for Enhanced CTR Prediction at Kuaishou” (快手) “LCN: Cross-Domain LifeLong Sequential Modeling for Online Click-Through Rate Prediction” (腾讯) “Trinity: Syncretizing Multi-:Long-Tail:Long-Term Interests All in One” (字节跳动) ","date":"2025-03-13","objectID":"/recomand_system/:2:3","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"4. 图神经网络在推荐系统中的应用 图神经网络(GNN)通过建模用户-物品交互图，有效捕捉高阶连接关系，提升推荐性能。 代表性工作： “AMGCR: Adaptive Fusion of Multi-View for Graph Contrastive Recommendation” (浙江大学) “Information-Controllable Graph Contrastive Learning for Recommendation” (北京邮电大学) “MMGCL: Meta Knowledge-Enhanced Multi-view Graph Contrastive Learning for Recommendations” (快手科技) ","date":"2025-03-13","objectID":"/recomand_system/:2:4","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"5. 多域和多任务推荐 多域和多任务推荐通过跨域知识迁移和多任务学习，解决数据稀疏和冷启动问题。 代表性工作： “MultiLoRA: Multi-Directional Low-Rank Adaptation for Multi-Domain Recommendation” (阿里巴巴) “MLoRA: Multi-Domain Low-Rank Adaptive Network for Click-Through Rate Prediction” (阿里巴巴) “M3oE: Multi-Domain Multi-Task Mixture-of-Experts Recommendation Framework” (快手) ","date":"2025-03-13","objectID":"/recomand_system/:2:5","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"6. 创作者端推荐系统 创作者端推荐系统是一个新兴研究方向，关注如何为内容创作者提供更好的推荐服务。 代表性工作： “Creator-Side Recommender System: Challenges, Designs, and Applications” (快手) “DualRec: 为每个物品找到最合适的用户，以增强创作者体验” ","date":"2025-03-13","objectID":"/recomand_system/:2:6","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"7. 推荐系统的扩展性研究 随着模型规模和数据量的增长，推荐系统的扩展性成为重要研究方向。 代表性工作： “MARM: Unlocking the Future of Recommendation Systems through Memory Augmentation and Scalable Complexity” (快手) “Scaling Law of Large Sequential Recommendation Models” (人民大学\u0026腾讯) “Embedding Optimization for Training Large-scale Deep Learning Recommendation Systems with EMBark” (NVIDIA) ","date":"2025-03-13","objectID":"/recomand_system/:2:7","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"工业界推荐系统架构 ","date":"2025-03-13","objectID":"/recomand_system/:3:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"1. 字节跳动 Monolith Monolith是字节跳动开发的大规模推荐模型深度学习框架，具有两个重要特性： 无碰撞嵌入表：保证不同ID特征的唯一表示 实时训练：捕捉最新热点，帮助用户发现新兴趣 Monolith基于TensorFlow构建，支持批处理/实时训练和服务。 ","date":"2025-03-13","objectID":"/recomand_system/:3:1","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"2. 快手 MARM MARM (Memory Augmented Recommendation Model)是快手提出的里程碑工作，探索了一种新的缓存扩展规律。通过缓存部分复杂模块计算结果，MARM将单层注意力序列兴趣建模模块扩展到多层设置，同时保持较低的推理复杂度。 MARM构建了60TB缓存存储中心用于离线训练和在线服务，实验结果表明MARM带来了离线0.43% GAUC改进和在线2.079%每用户播放时长增益。 ","date":"2025-03-13","objectID":"/recomand_system/:3:2","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"3. 阿里巴巴多域推荐架构 阿里巴巴提出了多种多域推荐架构，如MultiLoRA和MLoRA，通过低秩适应网络实现多域推荐，有效解决了多域推荐中的数据稀疏和域间差异问题。 ","date":"2025-03-13","objectID":"/recomand_system/:3:3","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"未来趋势 LLM与推荐系统的深度融合：LLM将继续深刻影响推荐系统的发展，特别是在理解用户意图、生成解释和跨域推荐方面。 多模态推荐的普及：随着多模态内容的增加，多模态推荐将成为主流，特别是在短视频和电商领域。 更长序列的建模：捕捉用户长期兴趣的能力将继续提升，模型将能处理更长的用户行为序列。 推荐系统的可解释性和公平性：随着监管要求的增加，推荐系统的可解释性和公平性将受到更多关注。 推荐系统的绿色计算：随着模型规模的增长，如何在有限的计算资源下提供高质量推荐将成为重要研究方向。 ","date":"2025-03-13","objectID":"/recomand_system/:4:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"结论 推荐系统研究正处于快速发展阶段，大语言模型的引入为推荐系统带来了新的机遇和挑战。工业界和学术界正在共同推动推荐系统向更智能、更个性化、更可解释的方向发展。未来的推荐系统将更好地理解用户需求，提供更精准的推荐服务。 大语言模型在推荐系统中的应用（2023-2024） ","date":"2025-03-13","objectID":"/recomand_system/:5:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"大语言模型在推荐系统中的应用 大语言模型(LLM)凭借其强大的语义理解和生成能力，正在深刻改变推荐系统的研究和应用方向。本文档总结了2023年至今LLM在推荐系统中的主要应用方向、代表性工作及其影响。 ","date":"2025-03-13","objectID":"/recomand_system/:6:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"主要应用方向 ","date":"2025-03-13","objectID":"/recomand_system/:7:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"1. LLM作为推荐器 直接利用LLM的强大语义理解和生成能力进行推荐，通常通过提示工程(Prompt Engineering)引导LLM生成推荐结果。 代表性工作 CALRec: Contrastive Alignment of Generative LLMs For Sequential Recommendation 作者：Yaoyiran Li等 (剑桥大学、谷歌) 发表于：RecSys 2024 核心思想：提出了一个两阶段LLM微调框架，以双塔方式使用对比损失和语言建模损失进行微调。该模型在多个领域的数据上进行微调，然后在目标领域进行第二轮微调。 实验结果：与现有最先进的基线相比，在Recall@1上提高了37%，在NDCG@10上提高了24%。 InstructRec: Improving LLM-based Recommender Systems via Instruction Tuning 作者：Lei Li等 (微软研究院) 发表于：2023 核心思想：通过指令微调增强LLM的推荐能力，使LLM能够理解推荐任务的特定指令。 ","date":"2025-03-13","objectID":"/recomand_system/:7:1","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"2. LLM增强的推荐系统 将LLM与传统推荐模型结合，利用LLM增强传统推荐系统的能力。 代表性工作 ReLand: Integrating Large Language Models’ Insights into Industrial Recommenders via a Controllable Reasoning Pool 作者：Changxin Tian等 (蚂蚁集团) 发表于：RecSys 2024 核心思想：利用检索来无缝集成大型语言模型的见解到工业推荐器中。ReLand使用LLM对采样用户进行生成推荐，构建LLM推理池，然后利用检索为整个用户群体附加可靠的推荐理由。 实验结果：自2024年1月起部署在支付宝的推荐系统中，CTR提高了3.19%，CVR提高了1.08%。 Towards Open-World Recommendation with Knowledge Augmentation from Large Language Models 作者：Yunjia Xi等 (上海交通大学、华为诺亚方舟实验室) 发表于：RecSys 2024 核心思想：提出了一个开放世界知识增强推荐框架(KAR)，从LLM获取两类外部知识——用户偏好的推理知识和物品的事实知识。 实验结果：KAR显著优于最先进的基线，并与各种推荐算法兼容。在华为的新闻和音乐推荐平台上部署，在线A/B测试分别获得7%和1.7%的改进。 FLIP: Fine-grained Alignment between ID-based Models and Pretrained Language Models for CTR Prediction 作者：Hangyu Wang等 (上海交通大学、华为诺亚方舟实验室) 发表于：RecSys 2024 核心思想：提出了一种在基于ID的模型和预训练语言模型之间进行细粒度特征级对齐的方法，用于CTR预测。 实验结果：在三个真实世界数据集上的广泛实验表明，FLIP优于最先进的基线，并且与各种基于ID的模型和PLM高度兼容。 ","date":"2025-03-13","objectID":"/recomand_system/:7:2","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"3. 对话式推荐系统 利用LLM的对话能力，构建更自然、更交互式的对话推荐系统。 代表性工作 GenUI(ne) CRS: UI Elements and Retrieval-Augmented Generation in Conversational Recommender Systems with LLMs 作者：Ulysse Maes等 (布鲁塞尔自由大学) 发表于：RecSys 2024 Demo Track 核心思想：利用LLM生成交互式图形元素，增强用户体验，并实现检索增强生成(RAG)来解决LLM知识截止问题。 Towards Empathetic Conversational Recommender Systems 作者：Xiaoyu Zhang等 (山东大学、腾讯、阿姆斯特丹大学、莱顿大学) 发表于：RecSys 2024 核心思想：在对话推荐系统中引入共情能力，使系统能够捕捉和表达情感。提出了一个共情对话推荐(ECR)框架，包含情感感知物品推荐和情感对齐响应生成两个主要模块。 ","date":"2025-03-13","objectID":"/recomand_system/:7:3","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"4. 知识增强推荐系统 利用LLM从开放世界获取知识，弥补传统推荐系统的知识缺口。 代表性工作 KAR: Towards Open-World Recommendation with Knowledge Augmentation from Large Language Models 作者：Yunjia Xi等 (上海交通大学、华为诺亚方舟实验室) 发表于：RecSys 2024 核心思想：提出了一个开放世界知识增强推荐框架(KAR)，从LLM获取两类外部知识——用户偏好的推理知识和物品的事实知识。引入分解提示来引出对用户偏好的准确推理。 实验结果：KAR显著优于最先进的基线，并与各种推荐算法兼容。在华为的新闻和音乐推荐平台上部署，在线A/B测试分别获得7%和1.7%的改进。 ","date":"2025-03-13","objectID":"/recomand_system/:7:4","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"5. 蒸馏LLM知识到轻量级推荐模型 通过知识蒸馏，将LLM的知识转移到更轻量级的推荐模型中，解决LLM推理延迟高的问题。 代表性工作 DLLM2Rec: Distillation Matters: Empowering Sequential Recommenders to Match the Performance of Large Language Models 作者：Yu Cui等 (浙江大学、OPPO研究院、电子科技大学) 发表于：RecSys 2024 核心思想：提出了一种新颖的蒸馏策略DLLM2Rec，专门用于从基于LLM的推荐模型到传统序列模型的知识蒸馏。包括重要性感知排序蒸馏和协同嵌入蒸馏。 实验结果：DLLM2Rec提升了三种典型序列模型的平均性能47.97%，甚至在某些情况下使它们超过了基于LLM的推荐器。 ","date":"2025-03-13","objectID":"/recomand_system/:7:5","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"挑战与未来方向 ","date":"2025-03-13","objectID":"/recomand_system/:8:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"挑战 推理延迟：LLM的推理延迟高，难以满足实时推荐的需求。 幻觉问题：LLM可能生成不准确或虚构的内容，影响推荐质量。 计算资源消耗：LLM需要大量计算资源，增加了部署成本。 个性化与通用性平衡：如何在保持LLM通用能力的同时，实现高度个性化推荐。 ","date":"2025-03-13","objectID":"/recomand_system/:8:1","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"未来方向 更高效的LLM推理：开发更高效的LLM推理技术，降低延迟和资源消耗。 多模态LLM推荐：结合文本、图像、视频等多模态信息，提供更全面的推荐。 自适应提示工程：根据用户特征和上下文，自动生成最优提示。 LLM与传统推荐模型的深度融合：探索更有效的融合方式，结合两者优势。 可解释推荐：利用LLM的生成能力，提供更自然、更有说服力的推荐解释。 ","date":"2025-03-13","objectID":"/recomand_system/:8:2","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"结论 LLM在推荐系统中的应用正处于快速发展阶段，已经展现出巨大潜力。虽然面临一些挑战，但通过技术创新和模型优化，LLM有望成为推荐系统的重要组成部分，带来更智能、更个性化、更自然的推荐体验。随着研究的深入，我们期待看到更多创新的LLM推荐方法和应用场景。 序列推荐系统最新研究（2023-2024） ","date":"2025-03-13","objectID":"/recomand_system/:9:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"序列推荐系统 序列推荐系统通过建模用户的历史交互序列来预测用户未来的兴趣，是推荐系统研究的重要方向。近年来，随着深度学习技术的发展，特别是Transformer架构的广泛应用，序列推荐系统取得了显著进展。本文档总结了2023年至今序列推荐系统的最新研究成果，重点关注长序列建模、兴趣提取和工业应用等方面。 ","date":"2025-03-13","objectID":"/recomand_system/:10:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"长序列建模 随着用户与系统交互数据的积累，如何有效建模长期用户行为序列成为一个重要挑战。 ","date":"2025-03-13","objectID":"/recomand_system/:11:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"代表性工作 TWIN系列模型（快手） TWIN: TWo-stage Interest Network for Lifelong User Behavior Modeling in CTR Prediction at Kuaishou 作者：Kuaishou团队 发表于：2023 核心思想：提出了一个两阶段兴趣网络，用于CTR预测中的终身用户行为建模。第一阶段从用户的长期历史行为中提取兴趣，第二阶段将这些兴趣与短期行为结合，进行最终的CTR预测。 实验结果：在快手的短视频推荐系统中取得了显著的性能提升。 TWIN V2: Scaling Ultra-Long User Behavior Sequence Modeling for Enhanced CTR Prediction at Kuaishou 作者：Kuaishou团队 发表于：CIKM 2024 核心思想：TWIN的升级版，进一步增强了对超长用户行为序列的建模能力。通过优化的注意力机制和更高效的计算方法，能够处理更长的用户历史行为。 实验结果：在快手的短视频推荐系统中，相比TWIN取得了进一步的性能提升。 LCN（腾讯） LCN: Cross-Domain LifeLong Sequential Modeling for Online Click-Through Rate Prediction 作者：腾讯团队 发表于：KDD 2024 核心思想：提出了一个跨域终身序列建模方法，能够在多个域中捕捉用户的长期兴趣。通过特殊的注意力机制和跨域信息融合，实现了高效的长序列建模。 实验结果：在腾讯的多个业务场景中取得了显著的性能提升。 Trinity（字节跳动） Trinity: Syncretizing Multi-:Long-Tail:Long-Term Interests All in One 作者：字节跳动团队 发表于：KDD 2024 核心思想：提出了一个能够同时捕捉多种兴趣、长尾兴趣和长期兴趣的统一框架。通过创新的兴趣融合机制，解决了传统序列推荐模型在处理复杂兴趣时的局限性。 实验结果：在字节跳动的推荐系统中取得了显著的性能提升。 ","date":"2025-03-13","objectID":"/recomand_system/:11:1","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"序列推荐的新技术 ","date":"2025-03-13","objectID":"/recomand_system/:12:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"1. 重复填充技术 Repeated Padding for Sequential Recommendation 作者：Yizhou Dang等（东北大学） 发表于：RecSys 2024 核心思想：提出了一种简单而有效的填充方法，称为重复填充（RepPad）。具体来说，使用原始交互序列作为填充内容，并在模型训练期间将其填充到填充位置。这种操作可以执行有限次数或重复直到输入序列的长度达到最大限制。 实验结果：在GRU4Rec上平均提高了60.3%的推荐性能，在SASRec上提高了24.3%。 ","date":"2025-03-13","objectID":"/recomand_system/:12:1","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"2. 对比学习增强 CALRec: Contrastive Alignment of Generative LLMs For Sequential Recommendation 作者：Yaoyiran Li等（剑桥大学、谷歌） 发表于：RecSys 2024 核心思想：提出了一个两阶段LLM微调框架，使用对比损失和语言建模损失的混合进行微调。该模型首先在来自多个领域的数据混合上进行微调，然后进行另一轮目标领域微调。 实验结果：与许多最先进的基线相比，在Recall@1上提高了37%，在NDCG@10上提高了24%。 ","date":"2025-03-13","objectID":"/recomand_system/:12:2","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"3. 负反馈感知对比学习 Enhancing Sequential Music Recommendation with Negative Feedback-informed Contrastive Learning 作者：Pavan Seshadri等（佐治亚理工学院、维也纳工业大学） 发表于：RecSys 2024 核心思想：提出了一个序列感知的对比子任务，在会话嵌入空间中结构化物品嵌入，使真实的下一个正向物品（忽略跳过的物品）在结构上更接近，而跳过的曲目则远离会话中的所有物品。 实验结果：在三个音乐推荐数据集上的实验表明，该方法在下一个物品命中率、物品排名和跳过下降排名方面取得了一致的性能提升。 ","date":"2025-03-13","objectID":"/recomand_system/:12:3","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"工业应用中的序列推荐 ","date":"2025-03-13","objectID":"/recomand_system/:13:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"1. 快手的短视频推荐 快手在序列推荐方面进行了大量创新，特别是在长序列建模方面。TWIN和TWIN V2系列模型已经在快手的短视频推荐系统中大规模部署，服务于数亿用户。 ","date":"2025-03-13","objectID":"/recomand_system/:13:1","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"2. 字节跳动的推荐架构 字节跳动开发了Monolith框架和Trinity模型，用于大规模推荐系统。这些技术已经在抖音、今日头条等产品中应用，显著提升了推荐质量。 ","date":"2025-03-13","objectID":"/recomand_system/:13:2","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"3. 腾讯的跨域序列推荐 腾讯提出的LCN模型能够在多个业务域中捕捉用户的长期兴趣，已经在腾讯的多个产品中应用，如微信、QQ等。 ","date":"2025-03-13","objectID":"/recomand_system/:13:3","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"序列推荐的挑战与未来方向 ","date":"2025-03-13","objectID":"/recomand_system/:14:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"挑战 计算效率：随着序列长度的增加，计算复杂度呈指数级增长，如何设计更高效的算法是一个重要挑战。 噪声问题：用户行为序列中包含大量噪声，如何过滤噪声、提取真正的用户兴趣是一个关键问题。 冷启动：对于新用户或新物品，如何在序列推荐中解决冷启动问题仍然具有挑战性。 解释性：序列推荐模型通常是黑盒模型，如何提供可解释的推荐结果是一个重要研究方向。 ","date":"2025-03-13","objectID":"/recomand_system/:14:1","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"未来方向 与大语言模型结合：将序列推荐与大语言模型结合，利用大语言模型的强大语义理解能力，提升推荐质量。 多模态序列推荐：整合文本、图像、视频等多模态信息，提供更全面的用户兴趣表示。 自适应序列长度：根据用户特征和上下文，自动调整序列长度，平衡计算效率和推荐质量。 联邦学习序列推荐：在保护用户隐私的前提下，通过联邦学习技术实现高质量的序列推荐。 可解释序列推荐：开发能够提供可解释推荐结果的序列推荐模型，增强用户信任。 ","date":"2025-03-13","objectID":"/recomand_system/:14:2","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"结论 序列推荐系统在过去几年取得了显著进展，特别是在长序列建模、兴趣提取和工业应用等方面。随着深度学习技术的不断发展和大语言模型的兴起，序列推荐系统有望在未来取得更大的突破，为用户提供更精准、更个性化的推荐服务。工业界和学术界的紧密合作，将进一步推动序列推荐系统的发展和应用。 多模态推荐系统研究（2023-2024） ","date":"2025-03-13","objectID":"/recomand_system/:15:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"多模态推荐系统 多模态推荐系统通过整合文本、图像、音频等多种模态的信息，提供更全面的用户兴趣表示和物品表示，从而提升推荐质量。随着短视频、电商等平台的发展，多模态内容日益丰富，多模态推荐系统的研究也变得越来越重要。本文档总结了2023年至今多模态推荐系统的最新研究成果，重点关注模态融合、冷启动问题解决和工业应用等方面。 ","date":"2025-03-13","objectID":"/recomand_system/:16:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"多模态推荐的关键技术 ","date":"2025-03-13","objectID":"/recomand_system/:17:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"1. 模态融合技术 多模态推荐系统的核心挑战之一是如何有效融合不同模态的信息。 代表性工作 RESA Unified Graph Transformer for Overcoming Isolations in Multi-modal Recommendation 作者：Zixuan Yi, Iadh Ounis（格拉斯哥大学） 发表于：RecSys 2024 核心思想：提出了一种名为统一多模态图Transformer（UGT）的新型模型，该模型首先利用多路Transformer从原始数据中提取对齐的多模态特征用于top-k推荐。随后，在UGT模型中构建了一个统一的图神经网络，共同融合从多路Transformer输出中派生的多模态用户/物品表示。 实验结果：在三个基准数据集上进行的广泛实验表明，UGT模型始终优于九种现有最先进的推荐方法，最高提升达13.97%。 AMGCR: Adaptive Fusion of Multi-View for Graph Contrastive Recommendation 作者：Mengduo Yang等（浙江大学） 发表于：RecSys 2024 核心思想：提出了一个自适应融合多视图的图对比推荐模型（AMGCR）。具体来说，为了生成更具信息性和更少噪声的视图以进行更好的对比学习，设计了四个视图生成器，分别专注于权重调整、特征转换、邻居聚合和注意力机制。然后，采用自适应多视图融合模块，从视图共享和视图特定两个层面结合不同视图。 实验结果：在三个真实世界数据集上的实验结果表明，AMGCR在Recall和NDCG方面平均提升超过10%。 ","date":"2025-03-13","objectID":"/recomand_system/:17:1","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"2. 冷启动问题解决 多模态推荐系统在解决冷启动问题方面具有天然优势，因为可以利用物品的多模态内容特征。 代表性工作 RESA Multi-modal Modeling Framework for Cold-start Short-video Recommendation 作者：Gaode Chen等（快手科技） 发表于：RecSys 2024 核心思想：提出了M3CSR，一个用于冷启动短视频推荐的多模态建模框架。具体来说，对物品的面向内容的多模态特征进行预处理，并通过聚类获得可训练的类别ID。在每个模态中，将模态特定的聚类ID嵌入与映射的原始模态特征结合作为物品的模态特定表示，以解决差距问题。 实验结果：在四个真实世界数据集上的广泛实验证明了所提出模型的优越性。该框架已部署在拥有数十亿用户规模的短视频应用程序上，并在冷启动场景中显示出各种商业指标的改进。 RESA multimodal single-branch embedding network for recommendation in cold-start and missing modality scenarios 作者：Christian Ganhör等（Johannes Kepler University Linz） 发表于：RecSys 2024 核心思想：提出了一种用于多模态推荐的新技术，依赖于多模态单分支嵌入网络（SiBraR）。利用权重共享，SiBraR使用相同的单分支嵌入网络在不同模态上编码交互数据以及多模态侧面信息。这使得SiBraR在缺失模态场景中有效，包括冷启动。 实验结果：在来自三个不同推荐领域（音乐、电影和电子商务）的大规模推荐数据集上的广泛实验表明，SiBraR在冷启动场景中显著优于协同过滤以及最先进的基于内容的推荐系统，并在温启动场景中具有竞争力。 ","date":"2025-03-13","objectID":"/recomand_system/:17:2","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"3. 多模态对比学习 对比学习已成为多模态推荐系统中的重要技术，通过对比不同模态或不同视图的表示，学习更有效的特征表示。 代表性工作 MMGCL: Meta Knowledge-Enhanced Multi-view Graph Contrastive Learning for Recommendations 作者：Yuezihan Jiang等（快手科技） 发表于：RecSys 2024 核心思想：提出了MMGCL，一个元知识增强的多视图图对比学习框架，用于推荐。为了解决数据噪声问题，MMGCL提取元知识以保留所有视图中的重要信息，形成元视图表示。然后，它纠正多学习框架中的每个视图，从而同时消除视图私有的噪声边和不同视图之间的冲突边。 实验结果：在三个基准数据集和一个实际工业在线应用上的广泛实验证明了MMGCL的最先进推荐性能。 ","date":"2025-03-13","objectID":"/recomand_system/:17:3","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"工业应用中的多模态推荐 ","date":"2025-03-13","objectID":"/recomand_system/:18:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"1. 快手的短视频推荐 快手在多模态推荐方面进行了大量创新，特别是在冷启动和多模态融合方面。M3CSR和MMGCL等模型已经在快手的短视频推荐系统中大规模部署，服务于数亿用户。 ","date":"2025-03-13","objectID":"/recomand_system/:18:1","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"2. 阿里巴巴的电商推荐 阿里巴巴在电商推荐中广泛应用多模态技术，结合商品图像、文本描述和用户行为数据，提供更精准的推荐。 ","date":"2025-03-13","objectID":"/recomand_system/:18:2","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"3. 字节跳动的内容推荐 字节跳动在抖音等产品中应用多模态推荐技术，通过分析视频内容、音频特征和文本信息，提供个性化的内容推荐。 ","date":"2025-03-13","objectID":"/recomand_system/:18:3","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"多模态推荐的挑战与未来方向 ","date":"2025-03-13","objectID":"/recomand_system/:19:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"挑战 模态不一致性：不同模态的信息可能存在不一致，如何处理这种不一致性是一个重要挑战。 模态缺失：在实际应用中，某些模态的信息可能缺失，如何在模态缺失的情况下仍能提供高质量推荐是一个关键问题。 计算效率：多模态推荐系统通常需要处理大量的多模态数据，计算效率是一个重要考虑因素。 隐私保护：多模态数据可能包含更多用户隐私信息，如何在保护用户隐私的前提下进行多模态推荐是一个重要研究方向。 ","date":"2025-03-13","objectID":"/recomand_system/:19:1","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"未来方向 与大语言模型结合：将多模态推荐与大语言模型结合，利用大语言模型的多模态理解能力，提升推荐质量。 自监督学习：通过自监督学习技术，从大量未标记的多模态数据中学习有效的特征表示。 跨模态迁移学习：通过跨模态迁移学习，将一个模态的知识迁移到另一个模态，解决模态缺失问题。 多模态可解释推荐：开发能够提供多模态可解释推荐结果的模型，增强用户信任。 多模态联邦学习：在保护用户隐私的前提下，通过联邦学习技术实现高质量的多模态推荐。 ","date":"2025-03-13","objectID":"/recomand_system/:19:2","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"},{"categories":["推荐系统"],"content":"结论 多模态推荐系统在过去几年取得了显著进展，特别是在模态融合、冷启动问题解决和工业应用等方面。随着深度学习技术的不断发展和大语言模型的兴起，多模态推荐系统有望在未来取得更大的突破，为用户提供更精准、更个性化的推荐服务。工业界和学术界的紧密合作，将进一步推动多模态推荐系统的发展和应用。 ","date":"2025-03-13","objectID":"/recomand_system/:20:0","tags":["推荐系统"],"title":"推荐系统","uri":"/recomand_system/"}]